AWSTemplateFormatVersion: '2010-09-09'
Description: 'Just My Links - Complete Infrastructure'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, prod]
    Description: Environment name

  NotificationEmail:
    Type: String
    Description: Email address for monitoring alerts

  BearerToken:
    Type: String
    NoEcho: true
    Description: Bearer token for API authentication

  IsFirstRun:
    Type: String
    Default: "false"
    AllowedValues: ["true", "false"]
    Description: Set to true for first deployment to use public base image

Conditions:
  IsFirstRunCondition: !Equals
    - !Ref IsFirstRun
    - "true"
  IsNotFirstRunCondition: !Not
    - !Equals
      - !Ref IsFirstRun
      - "true"

Resources:
  # ============================================================================
  # NETWORKING RESOURCES
  # ============================================================================

  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-just-my-links-vpc"

  # Private Subnets (for Lambda and EFS)
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-just-my-links-private-subnet-1"

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-just-my-links-private-subnet-2"

  # Security Group for Lambda
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Just My Links Lambda function
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-just-my-links-lambda-sg"

  # Security Group for EFS
  EfsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Just My Links EFS
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !Ref LambdaSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-just-my-links-efs-sg"

  # ============================================================================
  # SECRETS RESOURCES
  # ============================================================================

  # Bearer Token Secret
  BearerTokenSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${Environment}-just-my-links-bearer-token"
      Description: Bearer token for Just My Links API authentication
      SecretString: !Ref BearerToken
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: just-my-links

  # ============================================================================
  # STORAGE RESOURCES
  # ============================================================================

  # EFS File System for ChromaDB
  EfsFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      PerformanceMode: generalPurpose
      ThroughputMode: bursting
      Encrypted: true
      FileSystemTags:
        - Key: Name
          Value: !Sub "${Environment}-just-my-links-chromadb"
        - Key: Environment
          Value: !Ref Environment

  # EFS Mount Targets
  EfsMountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EfsFileSystem
      SubnetId: !Ref PrivateSubnet1
      SecurityGroups:
        - !Ref EfsSecurityGroup

  EfsMountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EfsFileSystem
      SubnetId: !Ref PrivateSubnet2
      SecurityGroups:
        - !Ref EfsSecurityGroup

  # EFS Access Point for Lambda
  EfsAccessPoint:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref EfsFileSystem
      PosixUser:
        Uid: 1000
        Gid: 1000
      RootDirectory:
        Path: /chromadb
        CreationInfo:
          OwnerUid: 1000
          OwnerGid: 1000
          Permissions: 755
      AccessPointTags:
        - Key: Name
          Value: !Sub "${Environment}-just-my-links-chromadb-access-point"

  # ECR Repository for Lambda Container
  EcrRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub "${Environment}-just-my-links-lambda"
      ImageTagMutability: MUTABLE
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep last 10 images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 10
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # S3 Bucket for Log Backup
  LogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${Environment}-just-my-links-logs-${AWS::AccountId}"
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldLogs
            Status: Enabled
            ExpirationInDays: 90
            NoncurrentVersionExpirationInDays: 30
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # ============================================================================
  # MONITORING RESOURCES
  # ============================================================================

  # SNS Topic for Alerts
  AlertsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${Environment}-just-my-links-alerts"
      DisplayName: Just My Links Alerts

  # SNS Subscription for Email Alerts
  EmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref AlertsTopic
      Protocol: email
      Endpoint: !Ref NotificationEmail

  # CloudWatch Alarm for S3 Bucket Size
  S3BucketSizeAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${Environment}-just-my-links-s3-bucket-size"
      AlarmDescription: Alert when S3 logs bucket exceeds size threshold
      MetricName: BucketSizeBytes
      Namespace: AWS/S3
      Statistic: Average
      Period: 86400  # 24 hours
      EvaluationPeriods: 1
      Threshold: 1073741824  # 1GB in bytes
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: BucketName
          Value: !Ref LogsBucket
        - Name: StorageType
          Value: StandardStorage
      AlarmActions:
        - !Ref AlertsTopic

  # EventBridge Custom Bus
  EventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub "${Environment}-just-my-links"
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # ============================================================================
  # COMPUTE RESOURCES
  # ============================================================================

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${Environment}-just-my-links-lambda-role"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: EFSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - elasticfilesystem:ClientMount
                  - elasticfilesystem:ClientWrite
                  - elasticfilesystem:ClientRootAccess
                Resource: !Sub "arn:aws:elasticfilesystem:${AWS::Region}:${AWS::AccountId}:file-system/${EfsFileSystem}"
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref BearerTokenSecret
        - PolicyName: EventBridgeAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - events:PutEvents
                Resource: !GetAtt EventBus.Arn

  # Lambda Function
  IndexDocumentFunction:
    Type: AWS::Lambda::Function
    Condition: IsNotFirstRunCondition
    Properties:
      FunctionName: !Sub "${Environment}-just-my-links-index-document"
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ImageUri: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrRepository}:latest"
      PackageType: Image
      Timeout: 300
      MemorySize: 1024
      ReservedConcurrentExecutions: 1  # Single concurrent execution
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      FileSystemConfigs:
        - Arn: !Sub "arn:aws:elasticfilesystem:${AWS::Region}:${AWS::AccountId}:access-point/${EfsAccessPoint}"
          LocalMountPath: /mnt/chromadb
      Environment:
        Variables:
          BEARER_TOKEN_SECRET_ARN: !Ref BearerTokenSecret
          EVENT_BUS_NAME: !Sub "${Environment}-just-my-links"
          CHROMADB_PATH: /mnt/chromadb
          ENVIRONMENT_NAME: !Ref Environment
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Condition: IsNotFirstRunCondition
    Properties:
      Name: !Sub "${Environment}-just-my-links-api"
      Description: Just My Links API Gateway
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Resource
  IndexDocumentResource:
    Type: AWS::ApiGateway::Resource
    Condition: IsNotFirstRunCondition
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: index-document

  # API Gateway Method
  IndexDocumentMethod:
    Type: AWS::ApiGateway::Method
    Condition: IsNotFirstRunCondition
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref IndexDocumentResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${IndexDocumentFunction.Arn}/invocations"

  # Lambda Permission for API Gateway
  ApiGatewayLambdaPermission:
    Type: AWS::Lambda::Permission
    Condition: IsNotFirstRunCondition
    Properties:
      FunctionName: !Ref IndexDocumentFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/index-document"

  # API Gateway Deployment
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    Condition: IsNotFirstRunCondition
    DependsOn: IndexDocumentMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref Environment

Outputs:
  ApiGatewayUrl:
    Condition: IsNotFirstRunCondition
    Description: API Gateway endpoint URL
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/index-document"
    Export:
      Name: !Sub "${Environment}-just-my-links-api-url"

  EfsFileSystemId:
    Description: EFS File System ID for CLI access
    Value: !Ref EfsFileSystem
    Export:
      Name: !Sub "${Environment}-just-my-links-efs-id"

  LambdaFunctionArn:
    Condition: IsNotFirstRunCondition
    Description: Lambda function ARN
    Value: !GetAtt IndexDocumentFunction.Arn

  EcrRepositoryUri:
    Description: ECR Repository URI
    Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrRepository}"

  BearerTokenSecretName:
    Description: Name of the bearer token secret in Secrets Manager
    Value: !Ref BearerTokenSecret
    Export:
      Name: !Sub "${Environment}-just-my-links-bearer-token-secret-name"
