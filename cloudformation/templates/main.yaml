AWSTemplateFormatVersion: '2010-09-09'
Description: 'Just My Links - Complete Infrastructure'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, prod]
    Description: Environment name

  NotificationEmail:
    Type: String
    Description: Email address for monitoring alerts

  BearerToken:
    Type: String
    NoEcho: true
    Description: Bearer token for API authentication

  IsFirstRun:
    Type: String
    Default: "false"
    AllowedValues: ["true", "false"]
    Description: Set to true for first deployment to use public base image

Conditions:
  IsFirstRunCondition: !Equals
    - !Ref IsFirstRun
    - "true"
  IsNotFirstRunCondition: !Not
    - !Equals
      - !Ref IsFirstRun
      - "true"

Resources:

  # ============================================================================
  # SECRETS RESOURCES
  # ============================================================================

  # Auth Token Secret
  AuthTokenSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "just-my-links--auth-token--${Environment}"
      Description: Bearer token for Just My Links API authentication
      SecretString: !Ref BearerToken

  # ============================================================================
  # STORAGE RESOURCES
  # ============================================================================

  # ECR Repository for Store Document Lambda Container
  StoreDocumentEcrRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub "just-my-links-ecr-store-document-${Environment}"
      ImageTagMutability: MUTABLE
      RepositoryPolicyText:
        Version: '2012-10-17'
        Statement:
          - Sid: LambdaECRImageRetrievalPolicy
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - ecr:BatchGetImage
              - ecr:GetDownloadUrlForLayer
            Condition:
              StringLike:
                aws:sourceArn: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*"
          - Sid: AllowAdminAccess
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - ecr:*
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep last 2 images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 2
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }

  # ECR Repository for Index Documents Lambda Container
  IndexDocumentsEcrRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub "just-my-links-ecr-index-documents-${Environment}"
      ImageTagMutability: MUTABLE
      RepositoryPolicyText:
        Version: '2012-10-17'
        Statement:
          - Sid: LambdaECRImageRetrievalPolicy
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - ecr:BatchGetImage
              - ecr:GetDownloadUrlForLayer
            Condition:
              StringLike:
                aws:sourceArn: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*"
          - Sid: AllowAdminAccess
            Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - ecr:*
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep last 2 images",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 2
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }

  # S3 Bucket for all application data
  ApplicationBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "just-my-links--application-bucket--${Environment}"
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldLogs
            Status: Enabled
            Prefix: logs/
            ExpirationInDays: 90
            NoncurrentVersionExpirationInDays: 30
          - Id: DeleteOldChromaDBVersions
            Status: Enabled
            Prefix: chromadb/
            NoncurrentVersionExpirationInDays: 30
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # ============================================================================
  # MONITORING RESOURCES
  # ============================================================================

  # SNS Topic for Alerts
  AlertsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "just-my-links--alerts--${Environment}"
      DisplayName: Just My Links Alerts

  # SNS Subscription for Email Alerts
  EmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref AlertsTopic
      Protocol: email
      Endpoint: !Ref NotificationEmail

  # CloudWatch Alarm for S3 Bucket Size
  S3BucketSizeAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "just-my-links--s3-bucket-size--${Environment}"
      AlarmDescription: Alert when S3 application bucket exceeds size threshold
      MetricName: BucketSizeBytes
      Namespace: AWS/S3
      Statistic: Average
      Period: 86400  # 24 hours
      EvaluationPeriods: 1
      Threshold: 1073741824  # 1GB in bytes
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: BucketName
          Value: !Ref ApplicationBucket
        - Name: StorageType
          Value: StandardStorage
      AlarmActions:
        - !Ref AlertsTopic

  # EventBridge Custom Bus
  EventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Sub "just-my-links--events--${Environment}"

  # ============================================================================
  # QUEUING RESOURCES
  # ============================================================================

  # Dead Letter Queue for Index Documents
  IndexDocumentsDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "just-my-links--index-documents-dlq--${Environment}"
      MessageRetentionPeriod: 1209600  # 14 days

  # SQS Queue for Index Documents Trigger
  IndexDocumentsTriggerQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "just-my-links--index-documents-trigger--${Environment}"
      VisibilityTimeout: 360  # 6 minutes (longer than Lambda timeout)
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt IndexDocumentsDLQ.Arn
        maxReceiveCount: 3

  # EventBridge Rule to forward Document Stored events to SQS
  DocumentStoredRule:
    Type: AWS::Events::Rule
    Properties:
      Name: !Sub "just-my-links--document-stored-rule--${Environment}"
      Description: "Forward Document stored events to SQS queue"
      EventBusName: !Ref EventBus
      EventPattern:
        source: ["just-my-links.document-storage"]
        detail-type: ["Document stored"]
      Targets:
        - Arn: !GetAtt IndexDocumentsTriggerQueue.Arn
          Id: "IndexDocumentsTriggerTarget"

  # SQS Event Source Mapping for Index Documents Lambda
  IndexDocumentsEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Condition: IsNotFirstRunCondition
    Properties:
      EventSourceArn: !GetAtt IndexDocumentsTriggerQueue.Arn
      FunctionName: !Ref IndexDocumentsFunction
      BatchSize: 1
      MaximumBatchingWindowInSeconds: 0

  # CloudWatch Alarm for DLQ Messages
  DLQAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "just-my-links--index-documents-dlq-alarm--${Environment}"
      AlarmDescription: Alert when messages appear in the dead letter queue
      MetricName: ApproximateNumberOfVisibleMessages
      Namespace: AWS/SQS
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: QueueName
          Value: !GetAtt IndexDocumentsDLQ.QueueName
      AlarmActions:
        - !Ref AlertsTopic

  # ============================================================================
  # COMPUTE RESOURCES
  # ============================================================================

  # Store Document Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "just-my-links--store-document-role--${Environment}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref AuthTokenSecret
        - PolicyName: EventBridgeAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - events:PutEvents
                Resource: !GetAtt EventBus.Arn
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource: 
                  - !Sub "${ApplicationBucket.Arn}/*"
                  - !GetAtt ApplicationBucket.Arn

  # Index Documents Lambda Execution Role
  IndexDocumentsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "just-my-links--index-documents-role--${Environment}"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole
      Policies:
        - PolicyName: EventBridgeAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - events:PutEvents
                Resource: !GetAtt EventBus.Arn
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource: 
                  - !Sub "${ApplicationBucket.Arn}/*"
                  - !GetAtt ApplicationBucket.Arn

  # Document Storage Lambda Function
  StoreDocumentFunction:
    Type: AWS::Lambda::Function
    Condition: IsNotFirstRunCondition
    Properties:
      FunctionName: !Sub "just-my-links--store-document--${Environment}"
      Description: "Just My Links - store submitted documents"
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ImageUri: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${StoreDocumentEcrRepository}:latest"
      PackageType: Image
      Timeout: 300
      MemorySize: 1024
      ReservedConcurrentExecutions: 1  # Single concurrent execution
      Environment:
        Variables:
          BEARER_TOKEN_SECRET_ARN: !Ref AuthTokenSecret
          EVENT_BUS_NAME: !Sub "just-my-links--events--${Environment}"
          APPLICATION_BUCKET: !Ref ApplicationBucket
          ENVIRONMENT_NAME: !Ref Environment

  # Document Indexing Lambda Function
  IndexDocumentsFunction:
    Type: AWS::Lambda::Function
    Condition: IsNotFirstRunCondition
    Properties:
      FunctionName: !Sub "just-my-links--index-documents--${Environment}"
      Description: "Just My Links - index documents into ChromaDB"
      Role: !GetAtt IndexDocumentsLambdaRole.Arn
      Code:
        ImageUri: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${IndexDocumentsEcrRepository}:latest"
      PackageType: Image
      Timeout: 300
      MemorySize: 1024
      ReservedConcurrentExecutions: 1  # Single concurrent execution
      Environment:
        Variables:
          APPLICATION_BUCKET: !Ref ApplicationBucket
          ENVIRONMENT_NAME: !Ref Environment

  # API Gateway HTTP API
  DocumentStorageHttpApi:
    Type: AWS::ApiGatewayV2::Api
    Condition: IsNotFirstRunCondition
    Properties:
      Name: !Sub "just-my-links--store-documents-api--${Environment}"
      Description: Just My Links store documents HTTP API
      ProtocolType: HTTP
      CorsConfiguration:
        AllowCredentials: false
        AllowHeaders:
          - "*"
        AllowMethods:
          - "*"
        AllowOrigins:
          - "*"
        MaxAge: 86400

  # HTTP API Integration
  DocumentStorageHttpApiIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Condition: IsNotFirstRunCondition
    Properties:
      ApiId: !Ref DocumentStorageHttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StoreDocumentFunction.Arn}/invocations"
      PayloadFormatVersion: "2.0"

  # HTTP API Route for Document Storage - Proxy all requests to Lambda
  DocumentStorageHttpApiRoute:
    Type: AWS::ApiGatewayV2::Route
    Condition: IsNotFirstRunCondition
    Properties:
      ApiId: !Ref DocumentStorageHttpApi
      RouteKey: "$default"
      Target: !Sub "integrations/${DocumentStorageHttpApiIntegration}"

  # HTTP API Stage
  DocumentStorageHttpApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Condition: IsNotFirstRunCondition
    Properties:
      ApiId: !Ref DocumentStorageHttpApi
      StageName: !Ref Environment
      AutoDeploy: true

  # Lambda Permission for HTTP API
  DocumentStorageHttpApiLambdaPermission:
    Type: AWS::Lambda::Permission
    Condition: IsNotFirstRunCondition
    Properties:
      FunctionName: !Ref StoreDocumentFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${DocumentStorageHttpApi}/*/*"

  # SQS Queue Policy to allow EventBridge to send messages
  IndexDocumentsTriggerQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref IndexDocumentsTriggerQueue
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action:
              - sqs:SendMessage
            Resource: !GetAtt IndexDocumentsTriggerQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn: !GetAtt DocumentStoredRule.Arn

Outputs:
  DocumentStorageHttpApiUrl:
    Condition: IsNotFirstRunCondition
    Description: HTTP API endpoint URL
    Value: !Sub "https://${DocumentStorageHttpApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
    Export:
      Name: !Sub "just-my-links--store-document--${Environment}"

  ApplicationBucketName:
    Description: S3 Bucket name for application data (ChromaDB, stored documents, logs)
    Value: !Ref ApplicationBucket
    Export:
      Name: !Sub "just-my-links--application-bucket--${Environment}"

  StoreDocumentFunctionArn:
    Condition: IsNotFirstRunCondition
    Description: Store Document Lambda function ARN
    Value: !GetAtt StoreDocumentFunction.Arn

  IndexDocumentsFunctionArn:
    Condition: IsNotFirstRunCondition
    Description: Index Documents Lambda function ARN
    Value: !GetAtt IndexDocumentsFunction.Arn

  StoreDocumentEcrRepositoryUri:
    Description: Store Document ECR Repository URI
    Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${StoreDocumentEcrRepository}"

  IndexDocumentsEcrRepositoryUri:
    Description: Index Documents ECR Repository URI
    Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${IndexDocumentsEcrRepository}"

  AuthTokenSecretName:
    Description: Name of the auth token secret in Secrets Manager
    Value: !Ref AuthTokenSecret
    Export:
      Name: !Sub "just-my-links--auth-token-secret-name--${Environment}"

  EventBusName:
    Description: EventBridge event bus name
    Value: !Ref EventBus
    Export:
      Name: !Sub "just-my-links--event-bus-name--${Environment}"
